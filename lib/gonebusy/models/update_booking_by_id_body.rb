# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module Gonebusy
  class UpdateBookingByIdBody < BaseModel
    # New date of booking.  If a recurring booking, must be a date of an instance.  Several formats are supported: '2014-10-31', 'October 31, 2014'
    # @return [Date]
    attr_accessor :date

    # Required only when :recurs_by is 'monthly' or 'yearly' to differentiate between exact date or 'day in month/year'.  See Recurring Booking examples.
    # @return [DateRecursByEnum]
    attr_accessor :date_recurs_by

    # List of comma-separated days of the week this Booking falls on.  Useful for recurring Bookings.  If provided, at least one must be specified.
    # @return [String]
    attr_accessor :days

    # New length of time, in minutes, for the desired booking - if Service allows requesting a variable amount of time
    # @return [Integer]
    attr_accessor :duration

    # New end date of a recurring booking.  If recurring, leave blank for infinite booking.  Several formats are supported: '2014-10-31', 'October 31, 2014'.
    # @return [Date]
    attr_accessor :end_date

    # Optional frequency of recurrence as specified by :recurs_by.  E.g, :single, :every, :every_other, etc.
    # @return [FrequencyEnum]
    attr_accessor :frequency

    # Optional occurrence of frequency. E.g, :first, :2nd, :last, :2nd_to_last, etc.
    # @return [OccurrenceEnum]
    attr_accessor :occurrence

    # One of the possible recurrence values.
    # @return [RecursByEnum]
    attr_accessor :recurs_by

    # New time of booking.  Several formats are supported: '9am', '09:00', '9:00', '0900'
    # @return [String]
    attr_accessor :time

    # When a recurring booking, one of: ['instance', 'all', 'infinite']
    # @return [String]
    attr_accessor :update_recurring

    # A mapping from model property names to API property names
    def self.names
      if @hash.nil?
        @hash = {}
        @hash["date"] = "date"
        @hash["date_recurs_by"] = "date_recurs_by"
        @hash["days"] = "days"
        @hash["duration"] = "duration"
        @hash["end_date"] = "end_date"
        @hash["frequency"] = "frequency"
        @hash["occurrence"] = "occurrence"
        @hash["recurs_by"] = "recurs_by"
        @hash["time"] = "time"
        @hash["update_recurring"] = "update_recurring"
      end
      @hash
    end

    def initialize(date = nil,
                   date_recurs_by = nil,
                   days = nil,
                   duration = nil,
                   end_date = nil,
                   frequency = nil,
                   occurrence = nil,
                   recurs_by = nil,
                   time = nil,
                   update_recurring = nil)
      @date = date
      @date_recurs_by = date_recurs_by
      @days = days
      @duration = duration
      @end_date = end_date
      @frequency = frequency
      @occurrence = occurrence
      @recurs_by = recurs_by
      @time = time
      @update_recurring = update_recurring
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      if hash == nil
        nil
      else
        # Extract variables from the hash
        date = hash['date']
        date_recurs_by = hash['date_recurs_by']
        days = hash['days']
        duration = hash['duration']
        end_date = hash['end_date']
        frequency = hash['frequency']
        occurrence = hash['occurrence']
        recurs_by = hash['recurs_by']
        time = hash['time']
        update_recurring = hash['update_recurring']

        # Create object from extracted values
        UpdateBookingByIdBody.new(date,
                                  date_recurs_by,
                                  days,
                                  duration,
                                  end_date,
                                  frequency,
                                  occurrence,
                                  recurs_by,
                                  time,
                                  update_recurring)
      end
    end
  end
end
