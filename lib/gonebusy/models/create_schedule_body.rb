# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module Gonebusy
  class CreateScheduleBody < BaseModel
    # ID of Service being scheduled.
    # @return [Integer]
    attr_accessor :service_id

    # ID of User to create Schedule for.  You must be authorized to manage this User Id and User must own desired Service and Resource.
    # @return [Integer]
    attr_accessor :user_id

    # ID of Resource being scheduled.  If not provided and :user_id is not present, the default Resource of the API user is assumed to be the Resource being scheduled.  If not provided and :user_id is present, the default Resource of the User is assumed to be the Resource being Scheduled.
    # @return [Integer]
    attr_accessor :resource_id

    # Start Date of first TimeWindow.  Several formats are supported: '2014-10-31', 'October 31, 2014'.
    # @return [Date]
    attr_accessor :start_date

    # Optional End Date of first TimeWindow, leave blank for infinitely available.  Several formats are supported: '2014-10-31', 'October 31, 2014'.
    # @return [Date]
    attr_accessor :end_date

    # Start Time of first TimeWindow.  Several formats are supported: '9am', '09:00', '9:00', '0900'
    # @return [String]
    attr_accessor :start_time

    # End Time of first TimeWindow.  Several formats are supported: '5pm', '17:00', '1700'
    # @return [String]
    attr_accessor :end_time

    # Optional total number of minutes in TimeWindow.  Useful when duration of window is greater than 24 hours.
    # @return [Integer]
    attr_accessor :total_minutes

    # List of comma-separated days of the week this window of time falls on.  If provided, at least one must be specified.
    # @return [String]
    attr_accessor :days

    # One of the possible recurrence values
    # @return [RecursByEnum]
    attr_accessor :recurs_by

    # Optional frequency of recurrence as specified by :recurs_by.  E.g, :single, :every, :every_other, etc. If not provided, assumed to be :every
    # @return [FrequencyEnum]
    attr_accessor :frequency

    # Optional occurrence of frequency. E.g, :first, :2nd, :last, :2nd_to_last, etc.  If not provided, assumed to be :every
    # @return [OccurrenceEnum]
    attr_accessor :occurrence

    # Required only when :recurs_by is 'monthly' or 'yearly' to differentiate between exact date or 'day in month/year'.  See Schedule examples.
    # @return [DateRecursByEnum]
    attr_accessor :date_recurs_by

    # A mapping from model property names to API property names
    def self.names
      if @_hash.nil?
        @_hash = {}
        @_hash["service_id"] = "service_id"
        @_hash["user_id"] = "user_id"
        @_hash["resource_id"] = "resource_id"
        @_hash["start_date"] = "start_date"
        @_hash["end_date"] = "end_date"
        @_hash["start_time"] = "start_time"
        @_hash["end_time"] = "end_time"
        @_hash["total_minutes"] = "total_minutes"
        @_hash["days"] = "days"
        @_hash["recurs_by"] = "recurs_by"
        @_hash["frequency"] = "frequency"
        @_hash["occurrence"] = "occurrence"
        @_hash["date_recurs_by"] = "date_recurs_by"
      end
      @_hash
    end

    def initialize(service_id = nil,
                   user_id = nil,
                   resource_id = nil,
                   start_date = nil,
                   end_date = nil,
                   start_time = nil,
                   end_time = nil,
                   total_minutes = nil,
                   days = nil,
                   recurs_by = nil,
                   frequency = nil,
                   occurrence = nil,
                   date_recurs_by = nil)
      @service_id = service_id
      @user_id = user_id
      @resource_id = resource_id
      @start_date = start_date
      @end_date = end_date
      @start_time = start_time
      @end_time = end_time
      @total_minutes = total_minutes
      @days = days
      @recurs_by = recurs_by
      @frequency = frequency
      @occurrence = occurrence
      @date_recurs_by = date_recurs_by
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash
      service_id = hash['service_id']
      user_id = hash['user_id']
      resource_id = hash['resource_id']
      start_date = hash['start_date']
      end_date = hash['end_date']
      start_time = hash['start_time']
      end_time = hash['end_time']
      total_minutes = hash['total_minutes']
      days = hash['days']
      recurs_by = hash['recurs_by']
      frequency = hash['frequency']
      occurrence = hash['occurrence']
      date_recurs_by = hash['date_recurs_by']

      # Create object from extracted values
      CreateScheduleBody.new(service_id,
                             user_id,
                             resource_id,
                             start_date,
                             end_date,
                             start_time,
                             end_time,
                             total_minutes,
                             days,
                             recurs_by,
                             frequency,
                             occurrence,
                             date_recurs_by)
    end
  end
end
