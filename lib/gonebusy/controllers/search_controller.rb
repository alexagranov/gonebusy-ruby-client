# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module Gonebusy
  class SearchController < BaseController
    @@instance = SearchController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Search for Providers and Provided Services.
    # @param [String] authorization Required parameter: A valid API key, in the format 'Token API_KEY'
    # @param [String] query Required parameter: Example: 
    # @return SearchQueryResponse response from the API call
    def search_query(authorization, 
                     query)

      # prepare query url
      _query_builder = Configuration.get_base_uri()
      _query_builder << '/search/{query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'query' => query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'Authorization' => Configuration.authorization,
        'Authorization' => authorization
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      CustomAuth.apply(_request)
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise EntitiesErrorErrorException.new 'Bad Request', _context
      elsif _context.response.status_code == 401
        raise EntitiesErrorErrorException.new 'Unauthorized/Missing Token', _context
      elsif !_context.response.status_code.between?(200, 208)
        raise APIException.new 'Unexpected error', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return SearchQueryResponse.from_hash(decoded)
    end
  end
end
