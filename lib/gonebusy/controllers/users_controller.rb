# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module Gonebusy
  class UsersController < BaseController
    @@instance = UsersController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Return all Users that your account has access to.  Includes your own User as well as any Users for which you are the Account Manager.
    # @param [String] authorization Required parameter: A valid API key, in the format 'Token API_KEY'
    # @param [Integer] page Optional parameter: Page offset to fetch.
    # @param [Integer] per_page Optional parameter: Number of results to return per page.
    # @return GetUsersResponse response from the API call
    def get_users(authorization, 
                  page = 1, 
                  per_page = 10)

      # prepare query url
      _query_builder = Configuration.get_base_uri()
      _query_builder << '/users'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'page' => page,
        'per_page' => per_page
      }, array_serialization: Configuration.array_serialization
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'Authorization' => Configuration.authorization,
        'Authorization' => authorization
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      CustomAuth.apply(_request)
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise EntitiesErrorErrorException.new 'Bad Request', _context
      elsif _context.response.status_code == 401
        raise EntitiesErrorErrorException.new 'Unauthorized/Missing Token', _context
      elsif _context.response.status_code == 403
        raise EntitiesErrorErrorException.new 'Forbidden', _context
      elsif !_context.response.status_code.between?(200, 208)
        raise APIException.new 'Unexpected error', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetUsersResponse.from_hash(decoded)
    end

    # Create a User
    # @param [String] authorization Required parameter: A valid API key, in the format 'Token API_KEY'
    # @param [CreateUserBody] create_user_body Optional parameter: the content of the request
    # @return CreateUserResponse response from the API call
    def create_user(authorization, 
                    create_user_body = nil)

      # prepare query url
      _query_builder = Configuration.get_base_uri()
      _query_builder << '/users/new'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'Authorization' => Configuration.authorization,
        'Authorization' => authorization
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: create_user_body.to_json
      CustomAuth.apply(_request)
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise EntitiesErrorErrorException.new 'Bad Request', _context
      elsif _context.response.status_code == 401
        raise EntitiesErrorErrorException.new 'Unauthorized/Missing Token', _context
      elsif _context.response.status_code == 403
        raise EntitiesErrorErrorException.new 'Forbidden', _context
      elsif _context.response.status_code == 422
        raise EntitiesErrorErrorException.new 'Unprocessable Entity', _context
      elsif !_context.response.status_code.between?(200, 208)
        raise APIException.new 'Unexpected error', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return CreateUserResponse.from_hash(decoded)
    end

    # Return a User by id.
    # @param [String] authorization Required parameter: A valid API key, in the format 'Token API_KEY'
    # @param [String] id Required parameter: Example: 
    # @return GetUserByIdResponse response from the API call
    def get_user_by_id(authorization, 
                       id)

      # prepare query url
      _query_builder = Configuration.get_base_uri()
      _query_builder << '/users/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'Authorization' => Configuration.authorization,
        'Authorization' => authorization
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      CustomAuth.apply(_request)
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise EntitiesErrorErrorException.new 'Bad Request', _context
      elsif _context.response.status_code == 401
        raise EntitiesErrorErrorException.new 'Unauthorized/Missing Token', _context
      elsif _context.response.status_code == 403
        raise EntitiesErrorErrorException.new 'Forbidden', _context
      elsif _context.response.status_code == 404
        raise EntitiesErrorErrorException.new 'Not Found', _context
      elsif !_context.response.status_code.between?(200, 208)
        raise APIException.new 'Unexpected error', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetUserByIdResponse.from_hash(decoded)
    end

    # Update a User by id, with params.
    # @param [String] authorization Required parameter: A valid API key, in the format 'Token API_KEY'
    # @param [String] id Required parameter: Example: 
    # @param [UpdateUserByIdBody] update_user_by_id_body Optional parameter: the content of the request
    # @return UpdateUserByIdResponse response from the API call
    def update_user_by_id(authorization, 
                          id, 
                          update_user_by_id_body = nil)

      # prepare query url
      _query_builder = Configuration.get_base_uri()
      _query_builder << '/users/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'Authorization' => Configuration.authorization,
        'Authorization' => authorization
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: update_user_by_id_body.to_json
      CustomAuth.apply(_request)
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise EntitiesErrorErrorException.new 'Bad Request', _context
      elsif _context.response.status_code == 401
        raise EntitiesErrorErrorException.new 'Unauthorized/Missing Token', _context
      elsif _context.response.status_code == 403
        raise EntitiesErrorErrorException.new 'Forbidden', _context
      elsif _context.response.status_code == 404
        raise EntitiesErrorErrorException.new 'Not Found', _context
      elsif _context.response.status_code == 422
        raise EntitiesErrorErrorException.new 'Unprocessable Entity', _context
      elsif !_context.response.status_code.between?(200, 208)
        raise APIException.new 'Unexpected error', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return UpdateUserByIdResponse.from_hash(decoded)
    end
  end
end
